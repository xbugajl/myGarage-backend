openapi: 3.0.0
info:
  title: Example Garage Management API
  version: "1.0.0"
  description: >
    This is a sample Swagger/OpenAPI documentation for the combined routes you posted.
servers:
  - url: http://localhost:5000
    description: Local dev server

paths:
  ################
  # AUTH ROUTES
  ################
  /auth/login:
    post:
      summary: Login a user
      description: Verify user credentials (email & password) and return a JWT if valid.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
        "400":
          description: Invalid credentials
        "500":
          description: Server error

  /auth/register:
    post:
      summary: Register a new user
      description: Registers a user (admin if no valid invite code; user if an invite code is provided).
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                inviteCode:
                  type: string
                  description: Optional invite code; if valid, user is assigned to that garage
      responses:
        "201":
          description: User registered
        "400":
          description: User already exists or invalid invite code
        "500":
          description: Server error

  ################
  # CHAT ROUTES
  ################
  /chat/garage/{garageId}:
    get:
      summary: Get chat messages for a garage
      description: Returns up to 50 chat messages sorted by timestamp ascending for a given garage.
      tags:
        - Chat
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: garageId
          required: true
          description: ID of the garage
          schema:
            type: string
      responses:
        "200":
          description: Returns array of chat messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sender:
                      type: string
                    garage:
                      type: string
                    message:
                      type: string
                    timestamp:
                      type: string
                      format: date-time
        "500":
          description: Failed to fetch messages

  ################
  # GARAGES ROUTES
  ################
  /garages:
    get:
      summary: Get all garages (admin only)
      tags:
        - Garages
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of garages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    location:
                      type: string
                    admin:
                      type: object
                      properties:
                        name:
                          type: string
                        email:
                          type: string
        "403":
          description: Access denied (only admins)
        "500":
          description: Server error

    post:
      summary: Create a new garage (admin only)
      tags:
        - Garages
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, location]
              properties:
                name:
                  type: string
                location:
                  type: string
      responses:
        "201":
          description: Garage created
        "403":
          description: Access denied (only admins)
        "500":
          description: Server error

  /garages/{id}:
    get:
      summary: Get a specific garage by ID
      description: Only users assigned to this garage (including its admin) can access it.
      tags:
        - Garages
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Garage ID
          schema:
            type: string
      responses:
        "200":
          description: Garage details
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  location:
                    type: string
                  admin:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
        "403":
          description: Access denied
        "404":
          description: Garage not found
        "500":
          description: Server error

  /garages/invite:
    post:
      summary: Generate an invite code for a garage (admin only)
      description: Requires a valid x-auth-token from an admin user.
      tags:
        - Garages
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [garageId]
              properties:
                garageId:
                  type: string
                  description: ID of the garage for which to generate an invite
                expirationInHours:
                  type: integer
                  default: 24
                  description: Expiration time in hours
      responses:
        "201":
          description: Invite code created
          content:
            application/json:
              schema:
                type: object
                properties:
                  inviteCode:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
        "400":
          description: Missing garageId
        "403":
          description: Access denied (only admins)
        "500":
          description: Server error

  ################
  # INVITE ROUTES
  ################
  /invite:
    post:
      summary: Create an invite code (admin only)
      tags:
        - Invite
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [garageId]
              properties:
                garageId:
                  type: string
      responses:
        "201":
          description: Invite code generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
        "400":
          description: garageId is required
        "403":
          description: Access denied
        "500":
          description: Server error

  ################
  # TASKS ROUTES
  ################
  /tasks/user:
    get:
      summary: Get tasks assigned to current user
      tags:
        - Tasks
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    description:
                      type: string
                    dueDate:
                      type: string
                      format: date-time
                    status:
                      type: string
                    vehicle:
                      type: object
                      properties:
                        brand:
                          type: string
                        model:
                          type: string
        "500":
          description: Server error

  /tasks/garage/{garageId}/vehicle/{vehicleId}:
    post:
      summary: Create a new task for a vehicle in a specific garage (admin only)
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: garageId
          required: true
          schema:
            type: string
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, dueDate]
              properties:
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                assignedTo:
                  type: string
      responses:
        "201":
          description: Task created
        "403":
          description: Access denied (must be the admin of that garage)
        "500":
          description: Server error

  /tasks/complete/{id}:
    post:
      summary: Mark a task as completed
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                evidence:
                  type: array
                  items:
                    type: string
                latitude:
                  type: number
                longitude:
                  type: number
      responses:
        "200":
          description: Task marked as completed
        "403":
          description: Access denied (only the assigned user can complete the task)
        "404":
          description: Task not found
        "500":
          description: Server error

  ################
  # VEHICLES ROUTES
  ################
  /vehicles/garage/{garageId}:
    get:
      summary: Get vehicles for a specific garage
      tags:
        - Vehicles
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: garageId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns an array of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    brand:
                      type: string
                    model:
                      type: string
                    year:
                      type: integer
                    identification:
                      type: string
                    photos:
                      type: array
                      items:
                        type: string
        "403":
          description: Access denied
        "404":
          description: Garage not found
        "500":
          description: Server error

    post:
      summary: Create a new vehicle in a garage (admin only)
      tags:
        - Vehicles
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: garageId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [brand, model, year, identification]
              properties:
                brand:
                  type: string
                model:
                  type: string
                year:
                  type: integer
                identification:
                  type: string
                photos:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: Vehicle created
        "403":
          description: Access denied
        "404":
          description: Garage not found
        "500":
          description: Server error

  /vehicles/garage/{garageId}/vehicle/{vehicleId}:
    delete:
      summary: Delete a vehicle (admin only)
      tags:
        - Vehicles
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: garageId
          required: true
          schema:
            type: string
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Vehicle deleted successfully
        "400":
          description: Vehicle does not belong to this garage
        "403":
          description: Access denied
        "404":
          description: Vehicle or garage not found
        "500":
          description: Server error

    put:
      summary: Update a vehicle (admin only)
      tags:
        - Vehicles
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: garageId
          required: true
          schema:
            type: string
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  type: string
                model:
                  type: string
                year:
                  type: integer
                identification:
                  type: string
                photos:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Updated vehicle object
        "400":
          description: Vehicle does not belong to this garage
        "403":
          description: Access denied
        "404":
          description: Vehicle or garage not found
        "500":
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # (Optional) place shared schemas here if desired
security:
  - bearerAuth: []
